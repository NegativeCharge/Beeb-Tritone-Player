const string TritoneAssemblySource1="

	org #8000

	;test code

begin

	ld hl,music_data
	call play
	ret
	
	
	
;Tritone v2 beeper music engine by Shiru (shiru@mail.ru) 03'11
;Three channels of tone, per-pattern tempo
;One channel of interrupting drums
;Feel free to do whatever you want with the code, it is PD

OP_NOP	equ #00
OP_SCF	equ #37
OP_ORC	equ #b1

play
	di
	ld (nextPos.pos),hl
	ld c,16
	push iy
	exx
	push hl
	ld (stopPlayer.prevSP),sp
	xor a
	ld h,a
	ld l,h
	ld (playRow.cnt0),hl
	ld (playRow.cnt1),hl
	ld (playRow.cnt2),hl
	ld (soundLoop.duty0),a
	ld (soundLoop.duty1),a
	ld (soundLoop.duty2),a
	ld (nextRow.skipDrum),a
	in a,(#1f)
	and #1f
	ld a,OP_NOP
	jr nz,$+4
	ld a,OP_ORC
	ld (soundLoop.checkKempston),a
	jp nextPos

nextRow
.pos=$+1
	ld hl,0
	ld a,(hl)
	inc hl
	cp 2
	jr c,.ch0
	cp 128
	jr c,drumSound
	cp 255
	jp z,nextPos

.ch0
	ld d,1
	cp d
	jr z,.ch1
	or a
	jr nz,.ch0note
	ld b,a
	ld c,a
	jr .ch0set
.ch0note
	ld e,a
	and #0f
	ld b,a
	ld c,(hl)
	inc hl
	ld a,e
	and #f0
.ch0set
	ld (soundLoop.duty0),a
	ld (playRow.cnt0),bc
.ch1
	ld a,(hl)
	inc hl
	cp d
	jr z,.ch2
	or a
	jr nz,.ch1note
	ld b,a
	ld c,a
	jr .ch1set
.ch1note
	ld e,a
	and #0f
	ld b,a
	ld c,(hl)
	inc hl
	ld a,e
	and #f0
.ch1set
	ld (soundLoop.duty1),a
	ld (playRow.cnt1),bc
.ch2
	ld a,(hl)
	inc hl
	cp d
	jr z,.skip
	or a
	jr nz,.ch2note
	ld b,a
	ld c,a
	jr .ch2set
.ch2note
	ld e,a
	and #0f
	ld b,a
	ld c,(hl)
	inc hl
	ld a,e
	and #f0
.ch2set
	ld (soundLoop.duty2),a
	ld (playRow.cnt2),bc

.skip
	ld (.pos),hl
.skipDrum=$
	scf
	jp nc,playRow
	ld a,OP_NOP
	ld (.skipDrum),a

	ld hl,(playRow.speed)
	ld de,-150
	add hl,de
	ex de,hl
	jr c,$+5
	ld de,257
	ld a,d
	or a
	jr nz,$+3
	inc d
	ld a,e
	or a
	jr nz,$+3
	inc e
	jr playRow.drum

drumSound
	ld (nextRow.pos),hl

	add a,a
	ld ixl,a
	ld ixh,0
	ld bc,drumSettings-4
	add ix,bc
	cp 14*2
	ld a,OP_SCF
	ld (nextRow.skipDrum),a
	jr nc,drumNoise

drumTone
	ld bc,2
	ld a,b
	ld de,#1001
	ld l,(ix)
.l0
	bit 0,b
	jr z,.l1
	dec e
	jr nz,.l1
	ld e,l
	exa
	ld a,l
	add a,(ix+1)
	ld l,a
	exa
	xor d
.l1
	out (#fe),a
	djnz .l0
	dec c
	jp nz,.l0

	jp nextRow

drumNoise
	ld b,0
	ld h,b
	ld l,h
	ld de,#1001
.l0
	ld a,(hl)
	and d
	out (#fe),a
	and (ix)
	dec e
	out (#fe),a
	jr nz,.l1
	ld e,(ix+1)
	inc hl
.l1
	djnz .l0

	jp nextRow

nextPos
.pos=$+1
	ld hl,0
.read
	ld e,(hl)
	inc hl
	ld d,(hl)
	inc hl
	ld a,d
	or e
	jr z,orderLoop
	ld (.pos),hl
	ex de,hl
	ld c,(hl)
	inc hl
	ld b,(hl)
	inc hl
	ld (nextRow.pos),hl
	ld (playRow.speed),bc
	jp nextRow

orderLoop
	ld e,(hl)
	inc hl
	ld d,(hl)
	ex de,hl
	jr nextPos.read

playRow
.speed=$+1
	ld de,0
.drum
.cnt0=$+1
	ld bc,0
.prevHL=$+1
	ld hl,0
	exx
.cnt1=$+1
	ld de,0
.cnt2=$+1
	ld sp,0
	exx

soundLoop

";

const string TritoneAssemblySource2Same="
	
	add hl,bc	;11
	ld a,h		;4
.duty0=$+1
	cp 128		;7
	sbc a,a		;4
	exx			;4
	and c		;4
	out (#fe),a	;11
	add ix,de	;15
	ld a,ixh	;8
.duty1=$+1
	cp 128		;7
	sbc a,a		;4
	and c		;4
	out (#fe),a	;11
	add hl,sp	;11
	ld a,h		;4
.duty2=$+1
	cp 128		;7
	sbc a,a		;4
	and c		;4
	exx			;4
	dec e		;4
	out (#fe),a	;11
	jp nz,soundLoop	;10=153t
	dec d		;4
	jp nz,soundLoop	;10
	
";

const string TritoneAssemblySource2Different="

	add hl,bc	;11
	ld a,h		;4
	exx			;4
.duty0=$+1
	cp 128		;7
	sbc a,a		;4
	and c		;4
	add ix,de	;15
	out (#fe),a	;11
	ld a,ixh	;8
.duty1=$+1
	cp 128		;7
	sbc a,a		;4
	and c		;4
	out (#fe),a	;11
	add hl,sp	;11
	ld a,h		;4
.duty2=$+1
	cp 128		;7
	sbc a,a		;4
	and c		;4
	exx			;4
	dec e		;4
	out (#fe),a	;11
	jp nz,soundLoop	;10=153t
	dec d		;4
	jp nz,soundLoop	;10
	
";

const string TritoneAssemblySource3="

	ld (playRow.prevHL),hl

	in a,(#1f)
	and #1f
	ld c,a
	in a,(#fe)
	cpl
.checkKempston=$
	or c
	and #1f
	jp z,nextRow

stopPlayer
.prevSP=$+1
	ld sp,0
	pop hl
	exx
	pop iy
	ei
	ret

drumSettings
	db #01,#01	;tone,highest
	db #01,#02
	db #01,#04
	db #01,#08
	db #01,#20
	db #20,#04
	db #40,#04
	db #40,#08	;lowest
	db #04,#80	;special
	db #08,#80
	db #10,#80
	db #10,#02
	db #20,#02
	db #40,#02
	db #16,#01	;noise,highest
	db #16,#02
	db #16,#04
	db #16,#08
	db #16,#10
	db #00,#01
	db #00,#02
	db #00,#04
	db #00,#08
	db #00,#10
	
";

string TritoneAssemblySourceClean="";

#include "zxspectrum.1tl"

//song compiler arrays

uint8[] mute(4,0);
uint16[] noteToPeriodTable(128,0);


//song compiler variables

int songLength;
int songLoopStart;
int songLoopEnd;
int songHasLoop;

//engine constants

const float zxCpuTime=153.0f;
const float zxCpuClock=3500000.0f;
const float atariCpuTime=197.0f;	//in fact 177, but it messes up the pitch somehow; song speed also needs to be decreased by 1 to match
const float atariCpuClock=1773447.0f;	//others, ntsc uses an extra delay in player
const float bbcCpuTime=200.0f;
const float bbcCpuClock=2000000.0f;

void GenerateNotePeriods(float cpuClock,float cpuTime)
{
	float div=128.0f;

	for(int octave=0;octave<10;++octave)
	{
		for(int note=0;note<12;++note)
		{
			int period=int((NoteFreqTable[note]/div)*65536.0f/(cpuClock/cpuTime));

			if(period<0x0001) period=0x0001;
			if(period>0xffff) period=0xffff;

			noteToPeriodTable[2+octave*12+note]=period;
		}

		div/=2.0f;
	}
	
	noteToPeriodTable[0]=0;
	noteToPeriodTable[1]=0;
}


void Info(void)
{
	SetTitle("ZX|1BIT|Tritone");

	SetAbout("by Shiru 03'2011\n1tracker version by Shiru 03'2018\n\nThree channels of tone with duty cycle control, optional unequal volume ratio, and click drums. Global speed.");
	
	SetDocFile("tritone_series.txt");
}



void Init(void)
{
	float div;
	int note,octave,period;
	
	AddColumn( 0,COLUMN_NOTE ,0 ,1);
	AddColumn( 0,1           ,9 ,1);
	AddColumn( 0,1           ,8 ,1);
	AddColumn(-1,COLUMN_EMPTY,0 ,0);
	AddColumn( 1,COLUMN_NOTE ,0 ,1);
	AddColumn( 1,1           ,9 ,1);
	AddColumn( 1,1           ,8 ,1);
	AddColumn(-1,COLUMN_EMPTY,0 ,0);
	AddColumn( 2,COLUMN_NOTE ,0 ,1);
	AddColumn( 2,1           ,9 ,1);
	AddColumn( 2,1           ,8 ,1);
	AddColumn(-1,COLUMN_EMPTY,0 ,0);
	AddColumn( 3,2           ,24,1);
	
	SetNoteRange("C-0","B-7");
	SetPatternHeader(" Row  T1 dW T2 dW T3 dW Dr");
	SetInstrumentsNumber(1);
	SetLoopSupport(1);
	SetSpeedRange(1,99,12);
	
	ZXSetStandartExportOptions();
	
	AddExportFormat("Atari CA65 music data","s");
	AddExportFormat("BBC Micro BeebAsm music data","6502");
	
	//generate note to period table

	div=128.0f;

	for(octave=0;octave<8;++octave)
	{
		for(note=0;note<12;++note)
		{
			period=int((NoteFreqTable[note]/div)*65536.0f/(zxCpuClock/zxCpuTime));

			if(period<0x0000) period=0x0000;
			if(period>0x0fff) period=0x0fff;

			noteToPeriodTable[2+octave*12+note]=period;
		}

		div/=2.0f;
	}

	noteToPeriodTable[0]=0;
	noteToPeriodTable[1]=0;
}



void Instrument(void)
{
	ItemOption("Volume ratio","Different|Equal",0);
	ItemLabel("");
	ItemLabel("Tone channels can have Different or Equal volume ratio");
}



void Compile(uint format,uint startRow,uint oneShot,uint useMute)
{
	int i,n,row,len,size,speed,found,takeLoop,loopRow;
	int ch1_freq,ch2_freq,ch3_freq;
	int ch1_duty,ch2_duty,ch3_duty;
	int ch1_word,ch2_word,ch3_word;
	int ch1_word_prev,ch2_word_prev,ch3_word_prev;
	int drum_type;
	string db,dw,ds,hex,loc,lbl1,lbl2;

	switch(format)
	{	
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		    {
				db="db";
				dw="dw";
				ds="ds";
				hex="#";
				loc=".";
				lbl1="";
				lbl2=":";
				
				GenerateNotePeriods(zxCpuClock,zxCpuTime);
		    }
			break;
		case 5:
			{
				db=".byte";
				dw=".word";
				ds=".res";
				hex="$";
				loc="@";
				lbl1="";
				lbl2=":";
				
				GenerateNotePeriods(atariCpuClock,atariCpuTime);
			}
			break;
		case 6:
			{
				db="equb";
				dw="equw";
				ds=".res";
				hex="$";
				loc="";
				lbl1=".";
				lbl2="";
				
				GenerateNotePeriods(bbcCpuClock,bbcCpuTime);
			}
			break;
	}
	
	//get mute state

	for(i=0;i<4;++i) if(useMute>0) mute[i]=GetChannelMute(i); else mute[i]=0;

	//generate music data

	speed=GetSongSpeed()*128;
	
	TextFileClear();
	
	if(format<5)
	{
		TextFilePutString(TritoneAssemblySource1);

		if(GetInstrumentValue(0,0)>0)
		{
			TextFilePutString(TritoneAssemblySource2Same);
		}
		else
		{
			TextFilePutString(TritoneAssemblySource2Different);
		}

		TextFilePutString(TritoneAssemblySource3);
	}
	TextFilePutString(";compiled music data\n\n");
	TextFilePutString(lbl1+"music_data\n");
	TextFilePutString("\t"+dw+" "+loc+"pattern1\n");
	TextFilePutString(lbl1+"loop"+lbl2+"\n");
	TextFilePutString("\t"+dw+" "+loc+"pattern2\n");
	TextFilePutString("\t"+dw+" 0\n");
	TextFilePutString("\t"+dw+" "+loc+"loop\n");
	TextFilePutString(lbl1+"pattern1"+lbl2+"\n");
	TextFilePutString("\t"+dw+" "+hex+formatInt(speed,"0h",4)+"\n");

	//search for initial parameters in preceding rows
	
	ch1_freq=0;
	ch2_freq=0;
	ch3_freq=0;
	ch1_duty=0x80;
	ch2_duty=0x80;
	ch3_duty=0x80;
	drum_type=0;

	found=0;

	for(row=startRow-1;row>=0;--row)
	{
		if((found&0x01)==0) { n=GetSongData(row,2);  if(n>0) { ch1_duty=0x70+(n<<4); found|=0x01; } }
		if((found&0x02)==0) { n=GetSongData(row,6);  if(n>0) { ch2_duty=0x70+(n<<4); found|=0x02; } }
		if((found&0x04)==0) { n=GetSongData(row,10); if(n>0) { ch3_duty=0x70+(n<<4); found|=0x04; } }
		
		if(found==0x07) break;
	}

	//compile song

	songLength   =GetSongLength();
	songLoopStart=GetSongLoopStart();
	songLoopEnd  =GetSongLoopEnd();

	if(songLoopStart<songLoopEnd&&songLoopEnd<9999) songHasLoop=1; else songHasLoop=0;

	row=startRow;
	takeLoop=0;
	loopRow=-1;
	
	if(oneShot==1)
	{
		len=1;
	}
	else
	{
		len=songLength-row;

		if(songHasLoop==1)
		{
			if(row<songLoopStart)//start before loop
			{
				len=songLoopEnd-row;
				loopRow=songLoopStart;
				takeLoop=1;
			}
			else
			if(row<songLoopEnd)//start inside loop
			{
				len=songLoopEnd-songLoopStart;
				loopRow=row;
				takeLoop=1;
			}
		}
	}

	//compile song text

	ch1_word_prev=-1;
	ch2_word_prev=-1;
	ch3_word_prev=-1;
	
	while(len>0)
	{
		if(row==loopRow)
		{
			TextFilePutString("\t"+db+" "+hex+"ff\n");	//pattern end
			TextFilePutString(lbl1+"pattern2"+lbl2+"\n");
			TextFilePutString("\t"+dw+" "+hex+formatInt(speed,"0h",4)+"\n");
			
			ch1_word_prev=-1;
			ch2_word_prev=-1;
			ch3_word_prev=-1;
		}
		
		//gather row data

		if(mute[0]==0)
		{
			n=GetSongData(row,0);
			
			if(n==1) ch1_freq=0;
			
			if(n>1)
			{
				ch1_freq=noteToPeriodTable[n]-GetSongData(row,1)*2;
			
				if(ch1_freq<0) ch1_freq=0;
			}
			
			n=GetSongData(row,2);
			
			if(n>0) ch1_duty=0x70+(n<<4);
		}

		if(mute[1]==0)
		{
			n=GetSongData(row,4);
			
			if(n==1) ch2_freq=0;
			
			if(n>1)
			{
				ch2_freq=noteToPeriodTable[n]-GetSongData(row,5)*2;
			
				if(ch2_freq<0) ch2_freq=0;
			}
			
			n=GetSongData(row,6);
			
			if(n>0) ch2_duty=0x70+(n<<4);
		}
		
		if(mute[2]==0)
		{
			n=GetSongData(row,8);
			
			if(n==1) ch3_freq=0;
			
			if(n>1)
			{
				ch3_freq=noteToPeriodTable[n]-GetSongData(row,9)*2;
			
				if(ch3_freq<0) ch3_freq=0;
			}
			
			n=GetSongData(row,10);
			
			if(n>0) ch3_duty=0x70+(n<<4);
		}
		
		if(mute[3]==0)
		{
			drum_type=GetSongData(row,12);
		}
		
		//compile row
		
		TextFilePutString("\t"+db+" ");
		
		if(drum_type>0)
		{
			TextFilePutString(hex+formatInt(drum_type+1,"0h",2)+",");
		}
		
		ch1_word=(ch1_duty<<16)|ch1_freq;
		
		if(ch1_word_prev!=ch1_word)
		{
			ch1_word_prev=ch1_word;
			
			if(ch1_freq==0)
			{
				TextFilePutString(hex+"00,");
			}
			else
			{
				TextFilePutString(hex+formatInt(ch1_duty|(ch1_freq>>8),"0h",2)+","+hex+formatInt(ch1_freq&255,"0h",2)+",");
			}
		}
		else
		{
			TextFilePutString(hex+"01,");
		}
		
		ch2_word=(ch2_duty<<16)|ch2_freq;
		
		if(ch2_word_prev!=ch2_word)
		{
			ch2_word_prev=ch2_word;
			
			if(ch2_freq==0)
			{
				TextFilePutString(hex+"00,");
			}
			else
			{
				TextFilePutString(hex+formatInt(ch2_duty|(ch2_freq>>8),"0h",2)+","+hex+formatInt(ch2_freq&255,"0h",2)+",");
			}
		}
		else
		{
			TextFilePutString(hex+"01,");
		}
		
		ch3_word=(ch3_duty<<16)|ch3_freq;
		
		if(ch3_word_prev!=ch3_word)
		{
			ch3_word_prev=ch3_word;
			
			if(ch3_freq==0)
			{
				TextFilePutString(hex+"00");
			}
			else
			{
				TextFilePutString(hex+formatInt(ch3_duty|(ch3_freq>>8),"0h",2)+","+hex+formatInt(ch3_freq&255,"0h",2));
			}
		}
		else
		{
			TextFilePutString(hex+"01");
		}

		TextFilePutString("\n");
		
		--len;
		++row;

		if(takeLoop==1) if(row>=songLoopEnd) row=songLoopStart;
	}

	if(oneShot==1||takeLoop==0)
	{
		TextFilePutString("\t"+db+" "+hex+"ff\n");			//pattern end
		TextFilePutString(lbl1+"pattern2"+lbl2+"\n");
		TextFilePutString("\t"+dw+" "+hex+formatInt(speed,"0h",4)+"\n");
		TextFilePutString("\t"+db+" "+hex+"00,"+hex+"00,"+hex+"00\n");	//mute sound
	}

	TextFilePutString("\t"+db+" "+hex+"ff\n");	//pattern end

	//generate file
	
	if(format<5)
	{
		Z80MemInit(false);

		size=Z80AssCompile(TextFile,0x8000);

		if(size<0)
		{
			SetExtraInfo("Song compilation error");
			return;
		}

		SetExtraInfo("Compiled song with player takes "+size+" bytes");
	}

	switch(format)
	{
	case 0://AY file to play
	case 1://AY file to save
		{
			AYFileCreate(0x8000);
			AYFileAddBlock(0x8000,size);
			AYFileClose();
		}
		break;

	case 2://TAP file
		{
			TAPFileCreate(0x8000,size);
		}
		break;

	case 3://SCL file
		{
			SCLFileCreate(0x8000,size);
		}
		break;

	case 4://Z80 assembly file
	case 5://6502 CA65 assembly file
	case 6://6502 BeebAsm assembly file
		{
			TextFileDump();
		}
		break;
	}

}